<?php
/**
 * Generated by Peggy 3.0.2 with PHPeggy plugin 2.0.1
 *
 * https://peggyjs.org/
 * https://github.com/marcelbolten/phpeggy
 */

declare(strict_types=1);

namespace Loilo\JsonPath;

function buildLogicalExpression($head, $tail) {
    return array_reduce($tail, function ($result, $element) {
      return (object) [
        'type' => 'LogicalBinary',
        'operator' => $element[1],
        'left' => $result,
        'right' => $element[3],
      ];
    }, $head);
  }

  function buildUnaryExpression($not, $query) {
    if ($not) {
      return (object) [
        'type' => "LogicalUnary",
        'operator' => "!",
        'expr' => $query,
      ];
    } else {
      return $query;
    }
  }

/* BEGIN Utility functions */
/* chr_unicode - get unicode character from its char code */
if (!\function_exists("Loilo\\JsonPath\\chr_unicode")) {
    /** @param float|int $code */
    function chr_unicode(
        $code
    ): string {
        return \html_entity_decode("&#" . (int) $code .";", ENT_QUOTES, "UTF-8");
    }
}

/* ord_unicode - get unicode char code from string */
if (!\function_exists("Loilo\\JsonPath\\ord_unicode")) {
    function ord_unicode(
        string $character
    ): int {
        if (\strlen($character) === 1) {
            return \ord($character);
        }
        $json = \json_encode($character, \JSON_THROW_ON_ERROR);
        $utf16_1 = (int) \hexdec(\substr($json, 3, 4));
        if (substr($json, 7, 2) === "\u") {
            $utf16_2 = (int) \hexdec(\substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        }

        return $utf16_1;
    }
}

/* peg_regex_test - multibyte regex test */
if (!\function_exists("Loilo\\JsonPath\\peg_regex_test")) {
    function peg_regex_test(
        string $pattern,
        string $string
    ): bool {
        if ($pattern[-1] === "i") {
            return \mb_eregi(\substr($pattern, 1, -2), $string);
        }

        return \mb_ereg(\substr($pattern, 1, -1), $string);
    }
}
/* END Utility functions */

/* Syntax error exception */
if (!\class_exists("Loilo\\JsonPath\\SyntaxError", false)) {
    class SyntaxError extends \Exception
    {
        public string $name = "SyntaxError";

        /**
         * @param pegExpectation[]|null $expected
         */
        public function __construct(
            ?string $message,
            public ?array $expected,
            public string $found,
            public int $grammarOffset,
            public int $grammarLine,
            public int $grammarColumn,
            public pegLocation $location
        ) {
            parent::__construct($message ?? "", 0);
        }

        /**
         * @param array<int, array<string, string>> $sources
         */
        public function format(
            array $sources
        ): string {
            $str = $this->name . ": " . $this->message;
            if (!empty($this->location->source)) {
                $src = null;
                for ($k = 0; $k < \count($sources); $k++) {
                    if ($sources[$k]["source"] === $this->location->source) {
                        $src = \preg_split("/\r\n|\n|\r/", $sources[$k]["text"]);
                        break;
                    }
                }
                $start = $this->location->start;
                $loc = $this->location->source . ":" . $start->line . ":" . $start->column;
                if ($src) {
                    $end = $this->location->end;
                    $filler = $this->peg_padEnd("", $start->line !== 0 ? (int) \floor(\log10($start->line) + 1) : 1);
                    $line = $src[$start->line - 1];
                    $last = $start->line === $end->line ? $end->column : \strlen($line) + 1;
                    $hatLen = ($last - $start->column) ?: 1;
                    $str .= "\n --> " . $loc . "\n"
                        . $filler . " |\n"
                        . $start->line . " | " . $line . "\n"
                        . $filler . " | " . $this->peg_padEnd("", $start->column - 1)
                        . $this->peg_padEnd("", $hatLen, "^");
                } else {
                    $str .= "\n at " . $loc;
                }
            }
            return $str;
        }

        private function peg_padEnd(
            string $str,
            int $targetLength,
            string $padString = " "
        ): string {
            if (\strlen($str) > $targetLength) {
                return $str;
            }
            $targetLength -= \strlen($str);
            $padString .= \str_repeat($padString, $targetLength);
            return $str . \substr($padString, 0, $targetLength);
        }
    }
}

if (!\class_exists("Loilo\\JsonPath\\pegExpectation", false)) {
    class pegExpectation
    {
        public function __construct(
            public ?string $type = null,
            public ?string $description = null,
            public ?string $value = null,
            public ?string $ignoreCase = null
        ) {
        }
    }
}

if (!\class_exists("Loilo\\JsonPath\\pegCacheItem", false)) {
    class pegCacheItem
    {
        public function __construct(
            public int $nextPos,
            public mixed $result
        ) {
        }
    }
}

if (!\class_exists("Loilo\\JsonPath\\pegCachedPosDetails", false)) {
    class pegCachedPosDetails
    {
        public function __construct(
            public int $line = 1,
            public int $column = 1,
            public bool $seenCR = false
        ) {
        }
    }
}

if (!\class_exists("Loilo\\JsonPath\\pegLocation", false)) {
    class pegLocation
    {
        public function __construct(
            public string $source,
            public pegPosition $start,
            public pegPosition $end
        ) {
        }
    }
}

if (!\class_exists("Loilo\\JsonPath\\pegPosition", false)) {
    class pegPosition
    {
        public function __construct(
            public int $offset,
            public int $line,
            public int $column
        ) {
        }
    }
}

if (!\class_exists("Loilo\\JsonPath\\pegRange", false)) {
    class pegRange
    {
        public function __construct(
            public string $source,
            public int $start,
            public int $end
        ) {
        }
    }
}

class PeggyParser
{
    private int $peg_currPos = 0;
    private int $peg_reportedPos = 0;
    private int $peg_cachedPos = 0;
    private pegCachedPosDetails $peg_cachedPosDetails;
    private int $peg_maxFailPos = 0;
    /** @var pegExpectation[] $peg_maxFailExpected */
    private array $peg_maxFailExpected = [];
    private int $peg_silentFails = 0;
    /** @var string[] $input */
    private array $input = [];
    /** @var array<string, mixed> $options */
    private array $options = [];
    private int $input_length = 0;
    private \stdClass $peg_FAILED;
    private string $peg_source = "";

    private string $peg_l0 = " ";
    private string $peg_l1 = "\t";
    private string $peg_l2 = "\n";
    private string $peg_l3 = "\r";
    private string $peg_l4 = "\$";
    private string $peg_l5 = "\"";
    private string $peg_l6 = "'";
    private string $peg_l7 = "\\";
    private string $peg_l8 = "b";
    private string $peg_l9 = "f";
    private string $peg_l10 = "n";
    private string $peg_l11 = "r";
    private string $peg_l12 = "t";
    private string $peg_l13 = "/";
    private string $peg_l14 = "u";
    private string $peg_l15 = "d";
    private string $peg_l16 = "*";
    private string $peg_l17 = "0";
    private string $peg_l18 = "-";
    private string $peg_l19 = ":";
    private string $peg_l20 = "?";
    private string $peg_l21 = "||";
    private string $peg_l22 = "&&";
    private string $peg_l23 = "(";
    private string $peg_l24 = ")";
    private string $peg_l25 = "!";
    private string $peg_l26 = "@";
    private string $peg_l27 = "==";
    private string $peg_l28 = "!=";
    private string $peg_l29 = "<=";
    private string $peg_l30 = ">=";
    private string $peg_l31 = "<";
    private string $peg_l32 = ">";
    private string $peg_l33 = "[";
    private string $peg_l34 = "]";
    private string $peg_l35 = ".";
    private string $peg_l36 = "-0";
    private string $peg_l37 = "e";
    private string $peg_l38 = "true";
    private string $peg_l39 = "false";
    private string $peg_l40 = "null";
    private string $peg_l41 = "_";
    private string $peg_l42 = ",";
    private string $peg_l43 = "..";
    private string $peg_c0 = "/^[ -!]/";
    private string $peg_c1 = "/^[#-&]/";
    private string $peg_c2 = "/^[\\(-\\[]/";
    private string $peg_c3 = "/^[\\]-\\x{0D7FF}]/";
    private string $peg_c4 = "/^[\\x{0E000}-\\x{0FFFF}]/";
    private string $peg_c5 = "/^[\\x{0D800}-\\x{0DBFF}]/";
    private string $peg_c6 = "/^[\\x{0DC00}-\\x{0DFFF}]/";
    private string $peg_c7 = "/^[ABCEF]/i";
    private string $peg_c8 = "/^[0-7]/";
    private string $peg_c9 = "/^[89AB]/i";
    private string $peg_c10 = "/^[CDEF]/i";
    private string $peg_c11 = "/^[ABCDEF]/i";
    private string $peg_c12 = "/^[1-9]/";
    private string $peg_c13 = "/^[-+]/";
    private string $peg_c14 = "/^[a-z]/";
    private string $peg_c15 = "/^[\\x80-\\x{0D7FF}]/";
    private string $peg_c16 = "/^[0-9]/";
    private string $peg_c17 = "/^[a-z]/i";
    private pegExpectation $peg_e0;
    private pegExpectation $peg_e1;
    private pegExpectation $peg_e2;
    private pegExpectation $peg_e3;
    private pegExpectation $peg_e4;
    private pegExpectation $peg_e5;
    private pegExpectation $peg_e6;
    private pegExpectation $peg_e7;
    private pegExpectation $peg_e8;
    private pegExpectation $peg_e9;
    private pegExpectation $peg_e10;
    private pegExpectation $peg_e11;
    private pegExpectation $peg_e12;
    private pegExpectation $peg_e13;
    private pegExpectation $peg_e14;
    private pegExpectation $peg_e15;
    private pegExpectation $peg_e16;
    private pegExpectation $peg_e17;
    private pegExpectation $peg_e18;
    private pegExpectation $peg_e19;
    private pegExpectation $peg_e20;
    private pegExpectation $peg_e21;
    private pegExpectation $peg_e22;
    private pegExpectation $peg_e23;
    private pegExpectation $peg_e24;
    private pegExpectation $peg_e25;
    private pegExpectation $peg_e26;
    private pegExpectation $peg_e27;
    private pegExpectation $peg_e28;
    private pegExpectation $peg_e29;
    private pegExpectation $peg_e30;
    private pegExpectation $peg_e31;
    private pegExpectation $peg_e32;
    private pegExpectation $peg_e33;
    private pegExpectation $peg_e34;
    private pegExpectation $peg_e35;
    private pegExpectation $peg_e36;
    private pegExpectation $peg_e37;
    private pegExpectation $peg_e38;
    private pegExpectation $peg_e39;
    private pegExpectation $peg_e40;
    private pegExpectation $peg_e41;
    private pegExpectation $peg_e42;
    private pegExpectation $peg_e43;
    private pegExpectation $peg_e44;
    private pegExpectation $peg_e45;
    private pegExpectation $peg_e46;
    private pegExpectation $peg_e47;
    private pegExpectation $peg_e48;
    private pegExpectation $peg_e49;
    private pegExpectation $peg_e50;
    private pegExpectation $peg_e51;
    private pegExpectation $peg_e52;
    private pegExpectation $peg_e53;
    private pegExpectation $peg_e54;
    private pegExpectation $peg_e55;
    private pegExpectation $peg_e56;
    private pegExpectation $peg_e57;
    private pegExpectation $peg_e58;
    private pegExpectation $peg_e59;
    private pegExpectation $peg_e60;
    private pegExpectation $peg_e61;

    public function __construct()
    {
        $this->peg_FAILED = new \stdClass();
        $this->peg_cachedPosDetails = new pegCachedPosDetails();
        $this->peg_e0 = new pegExpectation("literal", "\" \"", " ", "false");
        $this->peg_e1 = new pegExpectation("literal", "\"\\t\"", "\t", "false");
        $this->peg_e2 = new pegExpectation("literal", "\"\\n\"", "\n", "false");
        $this->peg_e3 = new pegExpectation("literal", "\"\\r\"", "\r", "false");
        $this->peg_e4 = new pegExpectation("literal", "\"\\\$\"", "\$", "false");
        $this->peg_e5 = new pegExpectation("literal", "\"\\\"\"", "\"", "false");
        $this->peg_e6 = new pegExpectation("literal", "\"'\"", "'", "false");
        $this->peg_e7 = new pegExpectation("literal", "\"\\\\\"", "\\", "false");
        $this->peg_e8 = new pegExpectation("class", "[ -!]", "[ -!]", "false");
        $this->peg_e9 = new pegExpectation("class", "[#-&]", "[#-&]", "false");
        $this->peg_e10 = new pegExpectation("class", "[(-[]", "[(-[]", "false");
        $this->peg_e11 = new pegExpectation("class", "[]-\\x{0D7FF}]", "[]-\x{0D7FF}]", "false");
        $this->peg_e12 = new pegExpectation("class", "[\\x{0E000}-\\x{0FFFF}]", "[\x{0E000}-\x{0FFFF}]", "false");
        $this->peg_e13 = new pegExpectation("class", "[\\x{0D800}-\\x{0DBFF}]", "[\x{0D800}-\x{0DBFF}]", "false");
        $this->peg_e14 = new pegExpectation("class", "[\\x{0DC00}-\\x{0DFFF}]", "[\x{0DC00}-\x{0DFFF}]", "false");
        $this->peg_e15 = new pegExpectation("literal", "\"b\"", "b", "false");
        $this->peg_e16 = new pegExpectation("literal", "\"f\"", "f", "false");
        $this->peg_e17 = new pegExpectation("literal", "\"n\"", "n", "false");
        $this->peg_e18 = new pegExpectation("literal", "\"r\"", "r", "false");
        $this->peg_e19 = new pegExpectation("literal", "\"t\"", "t", "false");
        $this->peg_e20 = new pegExpectation("literal", "\"/\"", "/", "false");
        $this->peg_e21 = new pegExpectation("literal", "\"u\"", "u", "false");
        $this->peg_e22 = new pegExpectation("class", "[ABCEF]", "[ABCEF]", "true");
        $this->peg_e23 = new pegExpectation("literal", "\"D\"", "D", "true");
        $this->peg_e24 = new pegExpectation("class", "[0-7]", "[0-7]", "false");
        $this->peg_e25 = new pegExpectation("class", "[89AB]", "[89AB]", "true");
        $this->peg_e26 = new pegExpectation("class", "[CDEF]", "[CDEF]", "true");
        $this->peg_e27 = new pegExpectation("class", "[ABCDEF]", "[ABCDEF]", "true");
        $this->peg_e28 = new pegExpectation("literal", "\"*\"", "*", "false");
        $this->peg_e29 = new pegExpectation("literal", "\"0\"", "0", "false");
        $this->peg_e30 = new pegExpectation("literal", "\"-\"", "-", "false");
        $this->peg_e31 = new pegExpectation("class", "[1-9]", "[1-9]", "false");
        $this->peg_e32 = new pegExpectation("literal", "\":\"", ":", "false");
        $this->peg_e33 = new pegExpectation("literal", "\"?\"", "?", "false");
        $this->peg_e34 = new pegExpectation("literal", "\"||\"", "||", "false");
        $this->peg_e35 = new pegExpectation("literal", "\"&&\"", "&&", "false");
        $this->peg_e36 = new pegExpectation("literal", "\"(\"", "(", "false");
        $this->peg_e37 = new pegExpectation("literal", "\")\"", ")", "false");
        $this->peg_e38 = new pegExpectation("literal", "\"!\"", "!", "false");
        $this->peg_e39 = new pegExpectation("literal", "\"@\"", "@", "false");
        $this->peg_e40 = new pegExpectation("literal", "\"==\"", "==", "false");
        $this->peg_e41 = new pegExpectation("literal", "\"!=\"", "!=", "false");
        $this->peg_e42 = new pegExpectation("literal", "\"<=\"", "<=", "false");
        $this->peg_e43 = new pegExpectation("literal", "\">=\"", ">=", "false");
        $this->peg_e44 = new pegExpectation("literal", "\"<\"", "<", "false");
        $this->peg_e45 = new pegExpectation("literal", "\">\"", ">", "false");
        $this->peg_e46 = new pegExpectation("literal", "\"[\"", "[", "false");
        $this->peg_e47 = new pegExpectation("literal", "\"]\"", "]", "false");
        $this->peg_e48 = new pegExpectation("literal", "\".\"", ".", "false");
        $this->peg_e49 = new pegExpectation("literal", "\"-0\"", "-0", "false");
        $this->peg_e50 = new pegExpectation("literal", "\"e\"", "e", "true");
        $this->peg_e51 = new pegExpectation("class", "[-+]", "[-+]", "false");
        $this->peg_e52 = new pegExpectation("literal", "\"true\"", "true", "false");
        $this->peg_e53 = new pegExpectation("literal", "\"false\"", "false", "false");
        $this->peg_e54 = new pegExpectation("literal", "\"null\"", "null", "false");
        $this->peg_e55 = new pegExpectation("literal", "\"_\"", "_", "false");
        $this->peg_e56 = new pegExpectation("class", "[a-z]", "[a-z]", "false");
        $this->peg_e57 = new pegExpectation("literal", "\",\"", ",", "false");
        $this->peg_e58 = new pegExpectation("class", "[\\x80-\\x{0D7FF}]", "[\x80-\x{0D7FF}]", "false");
        $this->peg_e59 = new pegExpectation("class", "[0-9]", "[0-9]", "false");
        $this->peg_e60 = new pegExpectation("class", "[a-z]", "[a-z]", "true");
        $this->peg_e61 = new pegExpectation("literal", "\"..\"", "..", "false");
    }

    /**
     * @param string|string[] $input
     * @param mixed[] $args
     * @throws \Exception
     * @throws SyntaxError
     */
    public function parse(
        $input,
        array ...$args
    ): mixed {
        $this->peg_cleanup_state();
        $this->options = $args[0] ?? [];
        if (\is_array($input)) {
            $this->input = $input;
        } else {
            \preg_match_all("/./us", $input, $match);
            $this->input = $match[0];
        }
        $this->input_length = \count($this->input);
        $this->peg_source = $this->options["grammarSource"] ?? "";

        $old_regex_encoding = (string) \mb_regex_encoding();
        \mb_regex_encoding("UTF-8");

        if (method_exists($this, 'initialize')) {
            $this->initialize();
        }

        $peg_startRuleFunctions = ["JsonpathQuery" => [$this, "peg_parse_JsonpathQuery"]];
        $peg_startRuleFunction = [$this, "peg_parse_JsonpathQuery"];
        if (isset($this->options["startRule"])) {
            if (!isset($peg_startRuleFunctions[$this->options["startRule"]])) {
                throw new \Exception("Can't start parsing from rule \"" . $this->options["startRule"] . "\".");
            }

            $peg_startRuleFunction = $peg_startRuleFunctions[$this->options["startRule"]];
        }

        /* @var mixed $peg_result */
        $peg_result = \call_user_func($peg_startRuleFunction);

        \mb_regex_encoding($old_regex_encoding);

        if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
            $this->peg_cleanup_state();
            return $peg_result;
        }
        if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
            $this->peg_fail(new pegExpectation("end", "end of input"));
        }

        $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
        $this->peg_cleanup_state();
        throw $exception;
    }

    private function peg_cleanup_state(): void
    {
        $this->peg_currPos = 0;
        $this->peg_reportedPos = 0;
        $this->peg_cachedPos = 0;
        $this->peg_cachedPosDetails = new pegCachedPosDetails();
        $this->peg_maxFailPos = 0;
        $this->peg_maxFailExpected = [];
        $this->peg_silentFails = 0;
        $this->input = [];
        $this->input_length = 0;
        $this->options = [];
        $this->peg_source = "";
    }

    private function input_substr(
        int $start,
        int $length
    ): string {
        if ($length === 1 && $start < $this->input_length) {
            return $this->input[$start];
        }
        $substr = "";
        $max = \min($start + $length, $this->input_length);
        for ($i = $start; $i < $max; $i++) {
            $substr .= $this->input[$i];
        }
        return $substr;
    }

    private function text(): string
    {
        return $this->input_substr($this->peg_reportedPos, $this->peg_currPos - $this->peg_reportedPos);
    }

    private function offset(): int
    {
        return $this->peg_reportedPos;
    }

    private function range(): pegRange
    {
        return new pegRange($this->peg_source, $this->peg_reportedPos, $this->peg_currPos);
    }

    private function location(
        bool $fail = false
    ): pegLocation {
        $start = $this->peg_reportedPos;
        $end = $this->peg_currPos;
        if ($fail) {
            $start = $this->peg_maxFailPos;
            $end = $this->peg_maxFailPos + ($this->peg_maxFailPos < \count($this->input) ? 1 : 0);
        }
        $compute_pd_start = clone $this->peg_computePosDetails($start);
        $compute_pd_end = clone $this->peg_computePosDetails($end);

        return new pegLocation(
            $this->peg_source,
            new pegPosition($start, $compute_pd_start->line, $compute_pd_start->column),
            new pegPosition($end, $compute_pd_end->line, $compute_pd_end->column),
        );
    }

    private function line(): int
    {
        return $this->peg_computePosDetails($this->peg_reportedPos)->line;
    }

    private function column(): int
    {
        return $this->peg_computePosDetails($this->peg_reportedPos)->column;
    }

    /**
     * @throws SyntaxError
     */
    private function expected(
        string $description,
        ?int $where = null
    ): void {
        throw $this->peg_buildException(
            null,
            [new pegExpectation("other", $description)],
            $where ?? $this->peg_reportedPos
        );
    }

    /**
     * @throws SyntaxError
     */
    private function error(
        string $message,
        ?int $where = null
    ): void {
        throw $this->peg_buildException(
            $message,
            null,
            $where ?? $this->peg_reportedPos,
        );
    }

    private function peg_advancePos(
        pegCachedPosDetails $details,
        int $startPos,
        int $endPos
    ): void {
        for ($p = $startPos; $p < $endPos; $p++) {
            $ch = $this->input_substr($p, 1);
            if ($ch === "\n") {
                if (!$details->seenCR) {
                    $details->line++;
                }
                $details->column = 1;
                $details->seenCR = false;
            } elseif ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
                $details->line++;
                $details->column = 1;
                $details->seenCR = true;
            } else {
                $details->column++;
                $details->seenCR = false;
            }
        }
    }

    private function peg_computePosDetails(
        int $pos
    ): pegCachedPosDetails {
        if ($this->peg_cachedPos !== $pos) {
            if ($this->peg_cachedPos > $pos) {
                $this->peg_cachedPos = 0;
                $this->peg_cachedPosDetails = new pegCachedPosDetails();
            }
            $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
            $this->peg_cachedPos = $pos;
        }

        return $this->peg_cachedPosDetails;
    }

    private function peg_fail(
        pegExpectation $expected
    ): void {
        if ($this->peg_currPos < $this->peg_maxFailPos) {
            return;
        }

        if ($this->peg_currPos > $this->peg_maxFailPos) {
            $this->peg_maxFailPos = $this->peg_currPos;
            $this->peg_maxFailExpected = [];
        }

        $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator(
        pegExpectation $a,
        pegExpectation $b
    ): int {
        return $a->description <=> $b->description;
    }

    /** @param pegExpectation[]|null $expected */
    private function peg_buildException(
        ?string $message,
        ?array $expected,
        int $pos
    ): SyntaxError {
        $posDetails = $this->peg_computePosDetails($pos);
        $found = $pos < $this->input_length ? $this->input[$pos] : null;

        if ($expected !== null) {
            \usort($expected, [$this, "peg_buildException_expectedComparator"]);
            $i = 1;
            while ($i < \count($expected)) {
                if ($expected[$i - 1] === $expected[$i]) {
                    \array_splice($expected, $i, 1);
                } else {
                    $i++;
                }
            }
        }

        if ($message === null && $expected !== null) {
            $expectedDescs = \array_fill(0, \count($expected), null);

            for ($i = 0; $i < \count($expected); $i++) {
                $expectedDescs[$i] = $expected[$i]->description;
            }

            $expectedDesc = \count($expected) > 1
                ? join(", ", \array_slice($expectedDescs, 0, -1))
                    . " or "
                    . ($expectedDescs[\count($expected) - 1] ?? "")
                : $expectedDescs[0] ?? "";

            $foundDesc = $found ? \json_encode($found) : "end of input";

            $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
        }

        return new SyntaxError(
            $message,
            $expected,
            $found ?? "",
            $pos,
            $posDetails->line,
            $posDetails->column,
            $this->location(true)
        );
    }

    private function peg_f0(
        mixed $segments,
    ): mixed {
        return (object) [
            'type' => "Root", 
            'segments' => $segments,
          ];
    }

    private function peg_f1(
        mixed $literal,
    ): mixed {
        return (object) [
        'type' => "NameSelector",
        'member' => $literal,
      ];
    }

    private function peg_f2(
        mixed $literals,
    ): mixed {
        return join('', $literals);
    }

    private function peg_f3(
        mixed $literals,
    ): mixed {
        return join('', $literals);
    }

    private function peg_f4(
    ): mixed {
        return "\b";
    }

    private function peg_f5(
    ): mixed {
        return "\f";
    }

    private function peg_f6(
    ): mixed {
        return "\n";
    }

    private function peg_f7(
    ): mixed {
        return "\r";
    }

    private function peg_f8(
    ): mixed {
        return "\t";
    }

    private function peg_f9(
    ): mixed {
        return "/";
    }

    private function peg_f10(
    ): mixed {
        return "\\";
    }

    private function peg_f11(
        mixed $chars,
    ): mixed {
        return join('', array_map(fn ($char) => chr_unicode($char), $chars));
    }

    private function peg_f12(
        mixed $code,
    ): mixed {
        return [$code];
    }

    private function peg_f13(
        mixed $pair,
    ): mixed {
        return $pair;
    }

    private function peg_f14(
    ): mixed {
        return hexdec($this->text());
    }

    private function peg_f15(
    ): mixed {
        return hexdec($this->text());
    }

    private function peg_f16(
    ): mixed {
        return hexdec($this->text());
    }

    private function peg_f17(
    ): mixed {
        return hexdec($this->text());
    }

    private function peg_f18(
    ): mixed {
        return (object) [ 'type' => "WildcardSelector" ];
    }

    private function peg_f19(
        mixed $index,
    ): mixed {
        return (object) [ 'type' => "IndexSelector", 'index' => $index ];
    }

    private function peg_f20(
    ): mixed {
        return 0;
    }

    private function peg_f21(
    ): mixed {
        $int_min = -(2 ** 53) + 1;
          $int_max = 2 ** 53 - 1;
          $number = filter_var($this->text(), FILTER_VALIDATE_INT);
          if ($number !== false && $number >= $int_min && $number <= $int_max) {
            return $number;
          } else {
            throw new \Exception('Index must be within the range of I-JSON: ' . $number);
          }
    }

    private function peg_f22(
        mixed $start,
        mixed $end,
        mixed $step,
    ): mixed {
        return (object) [
        'type' => "SliceSelector",
        'start' => $start,
        'end' => $end,
        'step' => $step,
      ];
    }

    private function peg_f23(
        mixed $expr,
    ): mixed {
        return (object) [ 'type' => "FilterSelector", 'expr' => $expr ];
    }

    private function peg_f24(
        mixed $head,
        mixed $tail,
    ): mixed {
        return buildLogicalExpression($head, $tail);
    }

    private function peg_f25(
        mixed $head,
        mixed $tail,
    ): mixed {
        return buildLogicalExpression($head, $tail);
    }

    private function peg_f26(
        mixed $not,
        mixed $expr,
    ): mixed {
        if ($not) {
        return (object) [
          'type' => "LogicalUnary",
          'operator' => "!",
          'expr' => $expr,
        ];
      }

      return $expr;
    }

    private function peg_f27(
        mixed $not,
        mixed $query,
    ): mixed {
        return buildUnaryExpression($not, (object) [
        'type' => "TestExpr",
        'query' => $query,
      ]);
    }

    private function peg_f28(
        mixed $segments,
    ): mixed {
        return (object) [
        'type' => 'CurrentNode',
        'segments' => $segments,
      ];
    }

    private function peg_f29(
        mixed $left,
        mixed $op,
        mixed $right,
    ): mixed {
        return (object) [
        'type' => "ComparisonExpr",
        'left' => $left,
        'operator' => $op,
        'right' => $right,
      ];
    }

    private function peg_f30(
        mixed $literal,
    ): mixed {
        return (object) [
        'type' => "Literal",
        'member' => $literal,
      ];
    }

    private function peg_f31(
        mixed $segments,
    ): mixed {
        return (object) [
        'type' => 'CurrentNode',
        'segments' => $segments,
      ];
    }

    private function peg_f32(
        mixed $segments,
    ): mixed {
        return (object) [
        'type' => "Root",
        'segments' => $segments,
      ];
    }

    private function peg_f33(
        mixed $segment,
    ): mixed {
        return $segment;
    }

    private function peg_f34(
        mixed $selector,
    ): mixed {
        return [$selector];
    }

    private function peg_f35(
        mixed $selector,
    ): mixed {
        return [$selector];
    }

    private function peg_f36(
        mixed $selector,
    ): mixed {
        return [$selector];
    }

    private function peg_f37(
        mixed $int,
        mixed $frac,
        mixed $exp,
    ): mixed {
        return floatval(join('', [$int, $frac ?? '', $exp ? "e{$exp}" : '']));
    }

    private function peg_f38(
        mixed $sign,
        mixed $digits,
    ): mixed {
        $digits_string = join('', $digits);

      // Remove leading zeros as they don't pass FILTER_VALIDATE_INT
      $digits_string = preg_replace('/^0*(.)/', '$1', join('', $digits));

      $sign_string = $sign ?: '';

      $exponent_string = $sign_string . $digits_string;
      $exponent_int = filter_var($exponent_string, FILTER_VALIDATE_INT);
      if ($exponent_int !== false) {
        return $exponent_int;
      } else {
        throw new \Exception('Exponent must be within the range of I-JSON: ' . $exponent_string);
      }
    }

    private function peg_f39(
    ): mixed {
        return true;
    }

    private function peg_f40(
    ): mixed {
        return false;
    }

    private function peg_f41(
    ): mixed {
        return null;
    }

    private function peg_f42(
        mixed $name,
        mixed $args,
    ): mixed {
        if (!is_array($args)) {
        throw new \Exception('Function expression args must be array, got ' . gettype($args) . ' instead');
      }
      
      $head = $args[0];
      $tail = $args[1];
      return (object) [
        'type' => "FunctionExpr",
        'name' => $name,
        'args' => [$head, ...$tail],
      ];
    }

    private function peg_f43(
        mixed $selector,
    ): mixed {
        return [$selector];
    }

    private function peg_f44(
        mixed $head,
        mixed $tail,
    ): mixed {
        return [$head, ...$tail];
    }

    private function peg_f45(
    ): mixed {
        return (object) [
        'type' => "MemberNameShorthand",
        'member' => $this->text(),
      ];
    }

    private function peg_f46(
        mixed $selectors,
    ): mixed {
        if (is_array($selectors)) {
        return (object) [
          'type' => "DescendantSegment",
          'selectors' => $selectors,
        ];
      } else {
        return (object) [
          'type' => "DescendantSegment",
          'selectors' => [$selectors],
        ];
      }
    }

    private function peg_parse_JsonpathQuery(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_RootIdentifier();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_Segments();
            $this->peg_reportedPos = $s0;
            $s0 = $this->peg_f0($s2);
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Segments(): mixed
    {
        $s0 = [];
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_parse_S();
        $s3 = $this->peg_parse_Segment();
        if ($s3 !== $this->peg_FAILED) {
            $s1 = $s3;
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        while ($s1 !== $this->peg_FAILED) {
            $s0[] = $s1;
            $s1 = $this->peg_currPos;
            $s2 = $this->peg_parse_S();
            $s3 = $this->peg_parse_Segment();
            if ($s3 !== $this->peg_FAILED) {
                $s1 = $s3;
            } else {
                $this->peg_currPos = $s1;
                $s1 = $this->peg_FAILED;
            }
        }

        return $s0;
    }

    private function peg_parse_S(): mixed
    {
        $s0 = [];
        $s1 = $this->peg_parse_B();
        while ($s1 !== $this->peg_FAILED) {
            $s0[] = $s1;
            $s1 = $this->peg_parse_B();
        }

        return $s0;
    }

    private function peg_parse_B(): mixed
    {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l0) {
            $s0 = $this->peg_l0;
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e0);
            }
        }
        if ($s0 === $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l1) {
                $s0 = $this->peg_l1;
                $this->peg_currPos++;
            } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e1);
                }
            }
            if ($s0 === $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l2) {
                    $s0 = $this->peg_l2;
                    $this->peg_currPos++;
                } else {
                    $s0 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e2);
                    }
                }
                if ($s0 === $this->peg_FAILED) {
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l3) {
                        $s0 = $this->peg_l3;
                        $this->peg_currPos++;
                    } else {
                        $s0 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e3);
                        }
                    }
                }
            }
        }

        return $s0;
    }

    private function peg_parse_RootIdentifier(): mixed
    {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l4) {
            $s0 = $this->peg_l4;
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e4);
            }
        }

        return $s0;
    }

    private function peg_parse_Selector(): mixed
    {
        $s0 = $this->peg_parse_NameSelector();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parse_WildcardSelector();
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parse_SliceSelector();
                if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_parse_IndexSelector();
                    if ($s0 === $this->peg_FAILED) {
                        $s0 = $this->peg_parse_FilterSelector();
                    }
                }
            }
        }

        return $s0;
    }

    private function peg_parse_NameSelector(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_StringLiteral();
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f1($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parse_StringLiteral(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l5) {
            $s1 = $this->peg_l5;
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e5);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = [];
            $s3 = $this->peg_parse_DoubleQuoted();
            while ($s3 !== $this->peg_FAILED) {
                $s2[] = $s3;
                $s3 = $this->peg_parse_DoubleQuoted();
            }
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l5) {
                $s3 = $this->peg_l5;
                $this->peg_currPos++;
            } else {
                $s3 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e5);
                }
            }
            if ($s3 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s0 = $this->peg_f2($s2);
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l6) {
                $s1 = $this->peg_l6;
                $this->peg_currPos++;
            } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e6);
                }
            }
            if ($s1 !== $this->peg_FAILED) {
                $s2 = [];
                $s3 = $this->peg_parse_SingleQuoted();
                while ($s3 !== $this->peg_FAILED) {
                    $s2[] = $s3;
                    $s3 = $this->peg_parse_SingleQuoted();
                }
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l6) {
                    $s3 = $this->peg_l6;
                    $this->peg_currPos++;
                } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e6);
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f3($s2);
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        }

        return $s0;
    }

    private function peg_parse_DoubleQuoted(): mixed
    {
        $s0 = $this->peg_parse_Unescaped();
        if ($s0 === $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l6) {
                $s0 = $this->peg_l6;
                $this->peg_currPos++;
            } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e6);
                }
            }
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                $s1 = $this->peg_parse_ESC();
                if ($s1 !== $this->peg_FAILED) {
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l5) {
                        $s2 = $this->peg_l5;
                        $this->peg_currPos++;
                    } else {
                        $s2 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e5);
                        }
                    }
                    if ($s2 !== $this->peg_FAILED) {
                        $s0 = $s2;
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
                if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_currPos;
                    $s1 = $this->peg_parse_ESC();
                    if ($s1 !== $this->peg_FAILED) {
                        $s2 = $this->peg_parse_Escapable();
                        if ($s2 !== $this->peg_FAILED) {
                            $s0 = $s2;
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                }
            }
        }

        return $s0;
    }

    private function peg_parse_SingleQuoted(): mixed
    {
        $s0 = $this->peg_parse_Unescaped();
        if ($s0 === $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l5) {
                $s0 = $this->peg_l5;
                $this->peg_currPos++;
            } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e5);
                }
            }
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                $s1 = $this->peg_parse_ESC();
                if ($s1 !== $this->peg_FAILED) {
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l6) {
                        $s2 = $this->peg_l6;
                        $this->peg_currPos++;
                    } else {
                        $s2 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e6);
                        }
                    }
                    if ($s2 !== $this->peg_FAILED) {
                        $s0 = $s2;
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
                if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_currPos;
                    $s1 = $this->peg_parse_ESC();
                    if ($s1 !== $this->peg_FAILED) {
                        $s2 = $this->peg_parse_Escapable();
                        if ($s2 !== $this->peg_FAILED) {
                            $s0 = $s2;
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                }
            }
        }

        return $s0;
    }

    private function peg_parse_ESC(): mixed
    {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l7) {
            $s0 = $this->peg_l7;
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e7);
            }
        }

        return $s0;
    }

    private function peg_parse_Unescaped(): mixed
    {
        if (peg_regex_test($this->peg_c0, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e8);
            }
        }
        if ($s0 === $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c1, $this->input_substr($this->peg_currPos, 1))) {
                $s0 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e9);
                }
            }
            if ($s0 === $this->peg_FAILED) {
                if (peg_regex_test($this->peg_c2, $this->input_substr($this->peg_currPos, 1))) {
                    $s0 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s0 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e10);
                    }
                }
                if ($s0 === $this->peg_FAILED) {
                    if (peg_regex_test($this->peg_c3, $this->input_substr($this->peg_currPos, 1))) {
                        $s0 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s0 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e11);
                        }
                    }
                    if ($s0 === $this->peg_FAILED) {
                        if (peg_regex_test($this->peg_c4, $this->input_substr($this->peg_currPos, 1))) {
                            $s0 = $this->input_substr($this->peg_currPos, 1);
                            $this->peg_currPos++;
                        } else {
                            $s0 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e12);
                            }
                        }
                        if ($s0 === $this->peg_FAILED) {
                            $s0 = $this->peg_currPos;
                            $s1 = $this->peg_currPos;
                            if (peg_regex_test($this->peg_c5, $this->input_substr($this->peg_currPos, 1))) {
                                $s2 = $this->input_substr($this->peg_currPos, 1);
                                $this->peg_currPos++;
                            } else {
                                $s2 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_e13);
                                }
                            }
                            if ($s2 !== $this->peg_FAILED) {
                                if (peg_regex_test($this->peg_c6, $this->input_substr($this->peg_currPos, 1))) {
                                    $s3 = $this->input_substr($this->peg_currPos, 1);
                                    $this->peg_currPos++;
                                } else {
                                    $s3 = $this->peg_FAILED;
                                    if ($this->peg_silentFails === 0) {
                                        $this->peg_fail($this->peg_e14);
                                    }
                                }
                                if ($s3 !== $this->peg_FAILED) {
                                    $s2 = [$s2, $s3];
                                    $s1 = $s2;
                                } else {
                                    $this->peg_currPos = $s1;
                                    $s1 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s1;
                                $s1 = $this->peg_FAILED;
                            }
                            if ($s1 !== $this->peg_FAILED) {
                                $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
                            } else {
                                $s0 = $s1;
                            }
                        }
                    }
                }
            }
        }

        return $s0;
    }

    private function peg_parse_Escapable(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l8) {
            $s1 = $this->peg_l8;
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e15);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f4();
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l9) {
                $s1 = $this->peg_l9;
                $this->peg_currPos++;
            } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e16);
                }
            }
            if ($s1 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f5();
            }
            $s0 = $s1;
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l10) {
                    $s1 = $this->peg_l10;
                    $this->peg_currPos++;
                } else {
                    $s1 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e17);
                    }
                }
                if ($s1 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f6();
                }
                $s0 = $s1;
                if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_currPos;
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l11) {
                        $s1 = $this->peg_l11;
                        $this->peg_currPos++;
                    } else {
                        $s1 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e18);
                        }
                    }
                    if ($s1 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = $this->peg_f7();
                    }
                    $s0 = $s1;
                    if ($s0 === $this->peg_FAILED) {
                        $s0 = $this->peg_currPos;
                        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l12) {
                            $s1 = $this->peg_l12;
                            $this->peg_currPos++;
                        } else {
                            $s1 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e19);
                            }
                        }
                        if ($s1 !== $this->peg_FAILED) {
                            $this->peg_reportedPos = $s0;
                            $s1 = $this->peg_f8();
                        }
                        $s0 = $s1;
                        if ($s0 === $this->peg_FAILED) {
                            $s0 = $this->peg_currPos;
                            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l13) {
                                $s1 = $this->peg_l13;
                                $this->peg_currPos++;
                            } else {
                                $s1 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_e20);
                                }
                            }
                            if ($s1 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s0;
                                $s1 = $this->peg_f9();
                            }
                            $s0 = $s1;
                            if ($s0 === $this->peg_FAILED) {
                                $s0 = $this->peg_currPos;
                                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l7) {
                                    $s1 = $this->peg_l7;
                                    $this->peg_currPos++;
                                } else {
                                    $s1 = $this->peg_FAILED;
                                    if ($this->peg_silentFails === 0) {
                                        $this->peg_fail($this->peg_e7);
                                    }
                                }
                                if ($s1 !== $this->peg_FAILED) {
                                    $this->peg_reportedPos = $s0;
                                    $s1 = $this->peg_f10();
                                }
                                $s0 = $s1;
                                if ($s0 === $this->peg_FAILED) {
                                    $s0 = $this->peg_currPos;
                                    $s1 = $this->peg_currPos;
                                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l14) {
                                        $s2 = $this->peg_l14;
                                        $this->peg_currPos++;
                                    } else {
                                        $s2 = $this->peg_FAILED;
                                        if ($this->peg_silentFails === 0) {
                                            $this->peg_fail($this->peg_e21);
                                        }
                                    }
                                    if ($s2 !== $this->peg_FAILED) {
                                        $s3 = $this->peg_parse_Hexchar();
                                        if ($s3 !== $this->peg_FAILED) {
                                            $s1 = $s3;
                                        } else {
                                            $this->peg_currPos = $s1;
                                            $s1 = $this->peg_FAILED;
                                        }
                                    } else {
                                        $this->peg_currPos = $s1;
                                        $s1 = $this->peg_FAILED;
                                    }
                                    if ($s1 !== $this->peg_FAILED) {
                                        $this->peg_reportedPos = $s0;
                                        $s1 = $this->peg_f11($s1);
                                    }
                                    $s0 = $s1;
                                }
                            }
                        }
                    }
                }
            }
        }

        return $s0;
    }

    private function peg_parse_Hexchar(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_NonSurrogate();
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f12($s1);
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_currPos;
            $s2 = $this->peg_parse_HighSurrogate();
            if ($s2 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l7) {
                    $s3 = $this->peg_l7;
                    $this->peg_currPos++;
                } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e7);
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l14) {
                        $s4 = $this->peg_l14;
                        $this->peg_currPos++;
                    } else {
                        $s4 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e21);
                        }
                    }
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = $this->peg_parse_LowSurrogate();
                        if ($s5 !== $this->peg_FAILED) {
                            $s1 = [ $s2, $s5 ];
                        } else {
                            $this->peg_currPos = $s1;
                            $s1 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s1;
                        $s1 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s1;
                    $s1 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s1;
                $s1 = $this->peg_FAILED;
            }
            if ($s1 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f13($s1);
            }
            $s0 = $s1;
        }

        return $s0;
    }

    private function peg_parse_NonSurrogate(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_parse_DIGIT();
        if ($s2 === $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c7, $this->input_substr($this->peg_currPos, 1))) {
                $s2 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e22);
                }
            }
        }
        if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_currPos;
            $s4 = [];
            $s5 = $this->peg_parse_HEXDIG();
            while ($s5 !== $this->peg_FAILED) {
                $s4[] = $s5;
                if (\count($s4) >= 3) {
                    $s5 = $this->peg_FAILED;
                } else {
                    $s5 = $this->peg_parse_HEXDIG();
                }
            }
            if (\count($s4) < 3) {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
            } else {
                $s3 = $s4;
            }
            if ($s3 !== $this->peg_FAILED) {
                $s2 = [$s2, $s3];
                $s1 = $s2;
            } else {
                $this->peg_currPos = $s1;
                $s1 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f14();
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_currPos;
            if (\mb_strtolower($this->input_substr($this->peg_currPos, 1), "UTF-8") === $this->peg_l15) {
                $s2 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e23);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                if (peg_regex_test($this->peg_c8, $this->input_substr($this->peg_currPos, 1))) {
                    $s3 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e24);
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_currPos;
                    $s5 = [];
                    $s6 = $this->peg_parse_HEXDIG();
                    while ($s6 !== $this->peg_FAILED) {
                        $s5[] = $s6;
                        if (\count($s5) >= 2) {
                            $s6 = $this->peg_FAILED;
                        } else {
                            $s6 = $this->peg_parse_HEXDIG();
                        }
                    }
                    if (\count($s5) < 2) {
                        $this->peg_currPos = $s4;
                        $s4 = $this->peg_FAILED;
                    } else {
                        $s4 = $s5;
                    }
                    if ($s4 !== $this->peg_FAILED) {
                        $s2 = [$s2, $s3, $s4];
                        $s1 = $s2;
                    } else {
                        $this->peg_currPos = $s1;
                        $s1 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s1;
                    $s1 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s1;
                $s1 = $this->peg_FAILED;
            }
            if ($s1 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f15();
            }
            $s0 = $s1;
        }

        return $s0;
    }

    private function peg_parse_HighSurrogate(): mixed
    {
        $s0 = $this->peg_currPos;
        if (\mb_strtolower($this->input_substr($this->peg_currPos, 1), "UTF-8") === $this->peg_l15) {
            $s1 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e23);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c9, $this->input_substr($this->peg_currPos, 1))) {
                $s2 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e25);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_currPos;
                $s4 = [];
                $s5 = $this->peg_parse_HEXDIG();
                while ($s5 !== $this->peg_FAILED) {
                    $s4[] = $s5;
                    if (\count($s4) >= 2) {
                        $s5 = $this->peg_FAILED;
                    } else {
                        $s5 = $this->peg_parse_HEXDIG();
                    }
                }
                if (\count($s4) < 2) {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_FAILED;
                } else {
                    $s3 = $s4;
                }
                if ($s3 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f16();
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_LowSurrogate(): mixed
    {
        $s0 = $this->peg_currPos;
        if (\mb_strtolower($this->input_substr($this->peg_currPos, 1), "UTF-8") === $this->peg_l15) {
            $s1 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e23);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c10, $this->input_substr($this->peg_currPos, 1))) {
                $s2 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e26);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_currPos;
                $s4 = [];
                $s5 = $this->peg_parse_HEXDIG();
                while ($s5 !== $this->peg_FAILED) {
                    $s4[] = $s5;
                    if (\count($s4) >= 2) {
                        $s5 = $this->peg_FAILED;
                    } else {
                        $s5 = $this->peg_parse_HEXDIG();
                    }
                }
                if (\count($s4) < 2) {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_FAILED;
                } else {
                    $s3 = $s4;
                }
                if ($s3 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f17();
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_HEXDIG(): mixed
    {
        $s0 = $this->peg_parse_DIGIT();
        if ($s0 === $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c11, $this->input_substr($this->peg_currPos, 1))) {
                $s0 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e27);
                }
            }
        }

        return $s0;
    }

    private function peg_parse_WildcardSelector(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l16) {
            $s1 = $this->peg_l16;
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e28);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f18();
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parse_IndexSelector(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_int();
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f19($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parse_int(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l17) {
            $s1 = $this->peg_l17;
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e29);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f20();
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l18) {
                $s2 = $this->peg_l18;
                $this->peg_currPos++;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e30);
                }
            }
            if ($s2 === $this->peg_FAILED) {
                $s2 = null;
            }
            $s3 = $this->peg_parse_DIGIT1();
            if ($s3 !== $this->peg_FAILED) {
                $s4 = [];
                $s5 = $this->peg_parse_DIGIT();
                while ($s5 !== $this->peg_FAILED) {
                    $s4[] = $s5;
                    $s5 = $this->peg_parse_DIGIT();
                }
                $s2 = [$s2, $s3, $s4];
                $s1 = $s2;
            } else {
                $this->peg_currPos = $s1;
                $s1 = $this->peg_FAILED;
            }
            if ($s1 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f21();
            }
            $s0 = $s1;
        }

        return $s0;
    }

    private function peg_parse_DIGIT1(): mixed
    {
        if (peg_regex_test($this->peg_c12, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e31);
            }
        }

        return $s0;
    }

    private function peg_parse_SliceSelector(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_parse_int();
        if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parse_S();
            $s1 = $s2;
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        if ($s1 === $this->peg_FAILED) {
            $s1 = null;
        }
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l19) {
            $s2 = $this->peg_l19;
            $this->peg_currPos++;
        } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e32);
            }
        }
        if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parse_S();
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_int();
            if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_S();
                $s4 = $s5;
            } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_FAILED;
            }
            if ($s4 === $this->peg_FAILED) {
                $s4 = null;
            }
            $s5 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l19) {
                $s6 = $this->peg_l19;
                $this->peg_currPos++;
            } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e32);
                }
            }
            if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_currPos;
                $s8 = $this->peg_parse_S();
                $s9 = $this->peg_parse_int();
                if ($s9 !== $this->peg_FAILED) {
                    $s7 = $s9;
                } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                }
                if ($s7 === $this->peg_FAILED) {
                    $s7 = null;
                }
                $s5 = $s7;
            } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
            }
            if ($s5 === $this->peg_FAILED) {
                $s5 = null;
            }
            $this->peg_reportedPos = $s0;
            $s0 = $this->peg_f22($s1, $s4, $s5);
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_FilterSelector(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l20) {
            $s1 = $this->peg_l20;
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e33);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_S();
            $s3 = $this->peg_parse_LogicalOrExpr();
            if ($s3 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s0 = $this->peg_f23($s3);
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_LogicalOrExpr(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_LogicalAndExpr();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = [];
            $s3 = $this->peg_currPos;
            $s4 = $this->peg_parse_S();
            if ($this->input_substr($this->peg_currPos, 2) === $this->peg_l21) {
                $s5 = $this->peg_l21;
                $this->peg_currPos += 2;
            } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e34);
                }
            }
            if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_S();
                $s7 = $this->peg_parse_LogicalAndExpr();
                if ($s7 !== $this->peg_FAILED) {
                    $s4 = [$s4, $s5, $s6, $s7];
                    $s3 = $s4;
                } else {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
            }
            while ($s3 !== $this->peg_FAILED) {
                $s2[] = $s3;
                $s3 = $this->peg_currPos;
                $s4 = $this->peg_parse_S();
                if ($this->input_substr($this->peg_currPos, 2) === $this->peg_l21) {
                    $s5 = $this->peg_l21;
                    $this->peg_currPos += 2;
                } else {
                    $s5 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e34);
                    }
                }
                if ($s5 !== $this->peg_FAILED) {
                    $s6 = $this->peg_parse_S();
                    $s7 = $this->peg_parse_LogicalAndExpr();
                    if ($s7 !== $this->peg_FAILED) {
                        $s4 = [$s4, $s5, $s6, $s7];
                        $s3 = $s4;
                    } else {
                        $this->peg_currPos = $s3;
                        $s3 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_FAILED;
                }
            }
            $this->peg_reportedPos = $s0;
            $s0 = $this->peg_f24($s1, $s2);
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_LogicalAndExpr(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_BasicExpr();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = [];
            $s3 = $this->peg_currPos;
            $s4 = $this->peg_parse_S();
            if ($this->input_substr($this->peg_currPos, 2) === $this->peg_l22) {
                $s5 = $this->peg_l22;
                $this->peg_currPos += 2;
            } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e35);
                }
            }
            if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_S();
                $s7 = $this->peg_parse_BasicExpr();
                if ($s7 !== $this->peg_FAILED) {
                    $s4 = [$s4, $s5, $s6, $s7];
                    $s3 = $s4;
                } else {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
            }
            while ($s3 !== $this->peg_FAILED) {
                $s2[] = $s3;
                $s3 = $this->peg_currPos;
                $s4 = $this->peg_parse_S();
                if ($this->input_substr($this->peg_currPos, 2) === $this->peg_l22) {
                    $s5 = $this->peg_l22;
                    $this->peg_currPos += 2;
                } else {
                    $s5 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e35);
                    }
                }
                if ($s5 !== $this->peg_FAILED) {
                    $s6 = $this->peg_parse_S();
                    $s7 = $this->peg_parse_BasicExpr();
                    if ($s7 !== $this->peg_FAILED) {
                        $s4 = [$s4, $s5, $s6, $s7];
                        $s3 = $s4;
                    } else {
                        $this->peg_currPos = $s3;
                        $s3 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_FAILED;
                }
            }
            $this->peg_reportedPos = $s0;
            $s0 = $this->peg_f25($s1, $s2);
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_BasicExpr(): mixed
    {
        $s0 = $this->peg_parse_ParenExpr();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parse_ComparisonExpr();
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parse_TestExpr();
            }
        }

        return $s0;
    }

    private function peg_parse_ParenExpr(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_parse_LogicalNotOp();
        if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parse_S();
            $s1 = $s2;
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        if ($s1 === $this->peg_FAILED) {
            $s1 = null;
        }
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l23) {
            $s2 = $this->peg_l23;
            $this->peg_currPos++;
        } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e36);
            }
        }
        if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parse_S();
            $s4 = $this->peg_parse_LogicalOrExpr();
            if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_parse_S();
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l24) {
                    $s6 = $this->peg_l24;
                    $this->peg_currPos++;
                } else {
                    $s6 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e37);
                    }
                }
                if ($s6 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f26($s1, $s4);
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_LogicalNotOp(): mixed
    {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l25) {
            $s0 = $this->peg_l25;
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e38);
            }
        }

        return $s0;
    }

    private function peg_parse_TestExpr(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_parse_LogicalNotOp();
        if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parse_S();
            $s1 = $s2;
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        if ($s1 === $this->peg_FAILED) {
            $s1 = null;
        }
        $s2 = $this->peg_parse_FilterQuery();
        if ($s2 === $this->peg_FAILED) {
            $s2 = $this->peg_parse_FunctionExpr();
        }
        if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s0 = $this->peg_f27($s1, $s2);
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_FilterQuery(): mixed
    {
        $s0 = $this->peg_parse_RelQuery();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parse_JsonpathQuery();
        }

        return $s0;
    }

    private function peg_parse_RelQuery(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_CurrentNodeIdentifier();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_Segments();
            if ($s2 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s0 = $this->peg_f28($s2);
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_CurrentNodeIdentifier(): mixed
    {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l26) {
            $s0 = $this->peg_l26;
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e39);
            }
        }

        return $s0;
    }

    private function peg_parse_ComparisonExpr(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_Comparable();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_S();
            $s3 = $this->peg_parse_ComparisonOp();
            if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_parse_S();
                $s5 = $this->peg_parse_Comparable();
                if ($s5 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f29($s1, $s3, $s5);
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Literal(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_Number();
        if ($s1 === $this->peg_FAILED) {
            $s1 = $this->peg_parse_StringLiteral();
            if ($s1 === $this->peg_FAILED) {
                $s1 = $this->peg_parse_True();
                if ($s1 === $this->peg_FAILED) {
                    $s1 = $this->peg_parse_False();
                    if ($s1 === $this->peg_FAILED) {
                        $s1 = $this->peg_parse_Null();
                    }
                }
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f30($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parse_Comparable(): mixed
    {
        $s0 = $this->peg_parse_Literal();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parse_SingularQuery();
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parse_FunctionExpr();
            }
        }

        return $s0;
    }

    private function peg_parse_ComparisonOp(): mixed
    {
        if ($this->input_substr($this->peg_currPos, 2) === $this->peg_l27) {
            $s0 = $this->peg_l27;
            $this->peg_currPos += 2;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e40);
            }
        }
        if ($s0 === $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 2) === $this->peg_l28) {
                $s0 = $this->peg_l28;
                $this->peg_currPos += 2;
            } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e41);
                }
            }
            if ($s0 === $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 2) === $this->peg_l29) {
                    $s0 = $this->peg_l29;
                    $this->peg_currPos += 2;
                } else {
                    $s0 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e42);
                    }
                }
                if ($s0 === $this->peg_FAILED) {
                    if ($this->input_substr($this->peg_currPos, 2) === $this->peg_l30) {
                        $s0 = $this->peg_l30;
                        $this->peg_currPos += 2;
                    } else {
                        $s0 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e43);
                        }
                    }
                    if ($s0 === $this->peg_FAILED) {
                        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l31) {
                            $s0 = $this->peg_l31;
                            $this->peg_currPos++;
                        } else {
                            $s0 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e44);
                            }
                        }
                        if ($s0 === $this->peg_FAILED) {
                            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l32) {
                                $s0 = $this->peg_l32;
                                $this->peg_currPos++;
                            } else {
                                $s0 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_e45);
                                }
                            }
                        }
                    }
                }
            }
        }

        return $s0;
    }

    private function peg_parse_SingularQuery(): mixed
    {
        $s0 = $this->peg_parse_RelSingularQuery();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parse_AbsSingularQuery();
        }

        return $s0;
    }

    private function peg_parse_RelSingularQuery(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_CurrentNodeIdentifier();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_SingularQuerySegments();
            $this->peg_reportedPos = $s0;
            $s0 = $this->peg_f31($s2);
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_AbsSingularQuery(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_RootIdentifier();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_SingularQuerySegments();
            $this->peg_reportedPos = $s0;
            $s0 = $this->peg_f32($s2);
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_SingularQuerySegments(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = [];
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_parse_S();
        $s4 = $this->peg_parse_NameSegment();
        if ($s4 === $this->peg_FAILED) {
            $s4 = $this->peg_parse_IndexSegment();
        }
        if ($s4 !== $this->peg_FAILED) {
            $s2 = $s4;
        } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
        }
        while ($s2 !== $this->peg_FAILED) {
            $s1[] = $s2;
            $s2 = $this->peg_currPos;
            $s3 = $this->peg_parse_S();
            $s4 = $this->peg_parse_NameSegment();
            if ($s4 === $this->peg_FAILED) {
                $s4 = $this->peg_parse_IndexSegment();
            }
            if ($s4 !== $this->peg_FAILED) {
                $s2 = $s4;
            } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
            }
        }
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f33($s1);
        $s0 = $s1;

        return $s0;
    }

    private function peg_parse_NameSegment(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l33) {
            $s1 = $this->peg_l33;
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e46);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_NameSelector();
            if ($s2 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l34) {
                    $s3 = $this->peg_l34;
                    $this->peg_currPos++;
                } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e47);
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f34($s2);
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l35) {
                $s1 = $this->peg_l35;
                $this->peg_currPos++;
            } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e48);
                }
            }
            if ($s1 !== $this->peg_FAILED) {
                $s2 = $this->peg_parse_MemberNameShorthand();
                if ($s2 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f35($s2);
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        }

        return $s0;
    }

    private function peg_parse_IndexSegment(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l33) {
            $s1 = $this->peg_l33;
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e46);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_IndexSelector();
            if ($s2 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l34) {
                    $s3 = $this->peg_l34;
                    $this->peg_currPos++;
                } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e47);
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f36($s2);
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Number(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_int();
        if ($s1 === $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 2) === $this->peg_l36) {
                $s1 = $this->peg_l36;
                $this->peg_currPos += 2;
            } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e49);
                }
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_Frac();
            if ($s2 === $this->peg_FAILED) {
                $s2 = null;
            }
            $s3 = $this->peg_parse_Exp();
            if ($s3 === $this->peg_FAILED) {
                $s3 = null;
            }
            $this->peg_reportedPos = $s0;
            $s0 = $this->peg_f37($s1, $s2, $s3);
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Frac(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l35) {
            $s2 = $this->peg_l35;
            $this->peg_currPos++;
        } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e48);
            }
        }
        if ($s2 !== $this->peg_FAILED) {
            $s3 = [];
            $s4 = $this->peg_parse_DIGIT();
            if ($s4 !== $this->peg_FAILED) {
                while ($s4 !== $this->peg_FAILED) {
                    $s3[] = $s4;
                    $s4 = $this->peg_parse_DIGIT();
                }
            } else {
                $s3 = $this->peg_FAILED;
            }
            if ($s3 !== $this->peg_FAILED) {
                $s2 = [$s2, $s3];
                $s1 = $s2;
            } else {
                $this->peg_currPos = $s1;
                $s1 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
            $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
        } else {
            $s0 = $s1;
        }

        return $s0;
    }

    private function peg_parse_Exp(): mixed
    {
        $s0 = $this->peg_currPos;
        if (\mb_strtolower($this->input_substr($this->peg_currPos, 1), "UTF-8") === $this->peg_l37) {
            $s1 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e50);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c13, $this->input_substr($this->peg_currPos, 1))) {
                $s2 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e51);
                }
            }
            if ($s2 === $this->peg_FAILED) {
                $s2 = null;
            }
            $s3 = [];
            $s4 = $this->peg_parse_DIGIT();
            if ($s4 !== $this->peg_FAILED) {
                while ($s4 !== $this->peg_FAILED) {
                    $s3[] = $s4;
                    $s4 = $this->peg_parse_DIGIT();
                }
            } else {
                $s3 = $this->peg_FAILED;
            }
            if ($s3 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s0 = $this->peg_f38($s2, $s3);
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_True(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l38) {
            $s1 = $this->peg_l38;
            $this->peg_currPos += 4;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e52);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f39();
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parse_False(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 5) === $this->peg_l39) {
            $s1 = $this->peg_l39;
            $this->peg_currPos += 5;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e53);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f40();
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parse_Null(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l40) {
            $s1 = $this->peg_l40;
            $this->peg_currPos += 4;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e54);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f41();
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parse_FunctionName(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_parse_LCALPHA();
        if ($s2 !== $this->peg_FAILED) {
            $s3 = [];
            $s4 = $this->peg_parse_FunctionNameChar();
            while ($s4 !== $this->peg_FAILED) {
                $s3[] = $s4;
                $s4 = $this->peg_parse_FunctionNameChar();
            }
            $s2 = [$s2, $s3];
            $s1 = $s2;
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
            $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
        } else {
            $s0 = $s1;
        }

        return $s0;
    }

    private function peg_parse_FunctionNameChar(): mixed
    {
        $s0 = $this->peg_parse_LCALPHA();
        if ($s0 === $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l41) {
                $s0 = $this->peg_l41;
                $this->peg_currPos++;
            } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e55);
                }
            }
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parse_DIGIT();
            }
        }

        return $s0;
    }

    private function peg_parse_LCALPHA(): mixed
    {
        if (peg_regex_test($this->peg_c14, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e56);
            }
        }

        return $s0;
    }

    private function peg_parse_FunctionExpr(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_FunctionName();
        if ($s1 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l23) {
                $s2 = $this->peg_l23;
                $this->peg_currPos++;
            } else {
                $s2 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e36);
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $s3 = $this->peg_parse_S();
                $s4 = $this->peg_currPos;
                $s5 = $this->peg_parse_FunctionArgument();
                if ($s5 !== $this->peg_FAILED) {
                    $s6 = [];
                    $s7 = $this->peg_currPos;
                    $s8 = $this->peg_parse_S();
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l42) {
                        $s9 = $this->peg_l42;
                        $this->peg_currPos++;
                    } else {
                        $s9 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e57);
                        }
                    }
                    if ($s9 !== $this->peg_FAILED) {
                        $s10 = $this->peg_parse_S();
                        $s11 = $this->peg_parse_FunctionArgument();
                        if ($s11 !== $this->peg_FAILED) {
                            $s7 = $s11;
                        } else {
                            $this->peg_currPos = $s7;
                            $s7 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                    while ($s7 !== $this->peg_FAILED) {
                        $s6[] = $s7;
                        $s7 = $this->peg_currPos;
                        $s8 = $this->peg_parse_S();
                        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l42) {
                            $s9 = $this->peg_l42;
                            $this->peg_currPos++;
                        } else {
                            $s9 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e57);
                            }
                        }
                        if ($s9 !== $this->peg_FAILED) {
                            $s10 = $this->peg_parse_S();
                            $s11 = $this->peg_parse_FunctionArgument();
                            if ($s11 !== $this->peg_FAILED) {
                                $s7 = $s11;
                            } else {
                                $this->peg_currPos = $s7;
                                $s7 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s7;
                            $s7 = $this->peg_FAILED;
                        }
                    }
                    $s4 = [ $s5, $s6 ];
                } else {
                    $this->peg_currPos = $s4;
                    $s4 = $this->peg_FAILED;
                }
                if ($s4 === $this->peg_FAILED) {
                    $s4 = null;
                }
                $s5 = $this->peg_parse_S();
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l24) {
                    $s6 = $this->peg_l24;
                    $this->peg_currPos++;
                } else {
                    $s6 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e37);
                    }
                }
                if ($s6 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f42($s1, $s4);
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_FunctionArgument(): mixed
    {
        $s0 = $this->peg_parse_Literal();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parse_FilterQuery();
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parse_FunctionExpr();
                if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_parse_LogicalOrExpr();
                }
            }
        }

        return $s0;
    }

    private function peg_parse_Segment(): mixed
    {
        $s0 = $this->peg_parse_ChildSegment();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parse_DescendantSegment();
        }

        return $s0;
    }

    private function peg_parse_ChildSegment(): mixed
    {
        $s0 = $this->peg_parse_BracketedSelection();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l35) {
                $s1 = $this->peg_l35;
                $this->peg_currPos++;
            } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e48);
                }
            }
            if ($s1 !== $this->peg_FAILED) {
                $s2 = $this->peg_parse_WildcardSelector();
                if ($s2 === $this->peg_FAILED) {
                    $s2 = $this->peg_parse_MemberNameShorthand();
                }
                if ($s2 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f43($s2);
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        }

        return $s0;
    }

    private function peg_parse_BracketedSelection(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l33) {
            $s1 = $this->peg_l33;
            $this->peg_currPos++;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e46);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_S();
            $s3 = $this->peg_parse_Selector();
            if ($s3 !== $this->peg_FAILED) {
                $s4 = [];
                $s5 = $this->peg_currPos;
                $s6 = $this->peg_parse_S();
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l42) {
                    $s7 = $this->peg_l42;
                    $this->peg_currPos++;
                } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e57);
                    }
                }
                if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_parse_S();
                    $s9 = $this->peg_parse_Selector();
                    if ($s9 !== $this->peg_FAILED) {
                        $s5 = $s9;
                    } else {
                        $this->peg_currPos = $s5;
                        $s5 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_FAILED;
                }
                while ($s5 !== $this->peg_FAILED) {
                    $s4[] = $s5;
                    $s5 = $this->peg_currPos;
                    $s6 = $this->peg_parse_S();
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l42) {
                        $s7 = $this->peg_l42;
                        $this->peg_currPos++;
                    } else {
                        $s7 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e57);
                        }
                    }
                    if ($s7 !== $this->peg_FAILED) {
                        $s8 = $this->peg_parse_S();
                        $s9 = $this->peg_parse_Selector();
                        if ($s9 !== $this->peg_FAILED) {
                            $s5 = $s9;
                        } else {
                            $this->peg_currPos = $s5;
                            $s5 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s5;
                        $s5 = $this->peg_FAILED;
                    }
                }
                $s5 = $this->peg_parse_S();
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l34) {
                    $s6 = $this->peg_l34;
                    $this->peg_currPos++;
                } else {
                    $s6 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e47);
                    }
                }
                if ($s6 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f44($s3, $s4);
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_MemberNameShorthand(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_NameFirst();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = [];
            $s3 = $this->peg_parse_NameChar();
            while ($s3 !== $this->peg_FAILED) {
                $s2[] = $s3;
                $s3 = $this->peg_parse_NameChar();
            }
            $this->peg_reportedPos = $s0;
            $s0 = $this->peg_f45();
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_NameFirst(): mixed
    {
        $s0 = $this->peg_parse_ALPHA();
        if ($s0 === $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l41) {
                $s0 = $this->peg_l41;
                $this->peg_currPos++;
            } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e55);
                }
            }
            if ($s0 === $this->peg_FAILED) {
                if (peg_regex_test($this->peg_c15, $this->input_substr($this->peg_currPos, 1))) {
                    $s0 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s0 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e58);
                    }
                }
                if ($s0 === $this->peg_FAILED) {
                    if (peg_regex_test($this->peg_c4, $this->input_substr($this->peg_currPos, 1))) {
                        $s0 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s0 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e12);
                        }
                    }
                    if ($s0 === $this->peg_FAILED) {
                        $s0 = $this->peg_currPos;
                        $s1 = $this->peg_currPos;
                        if (peg_regex_test($this->peg_c5, $this->input_substr($this->peg_currPos, 1))) {
                            $s2 = $this->input_substr($this->peg_currPos, 1);
                            $this->peg_currPos++;
                        } else {
                            $s2 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e13);
                            }
                        }
                        if ($s2 !== $this->peg_FAILED) {
                            if (peg_regex_test($this->peg_c6, $this->input_substr($this->peg_currPos, 1))) {
                                $s3 = $this->input_substr($this->peg_currPos, 1);
                                $this->peg_currPos++;
                            } else {
                                $s3 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_e14);
                                }
                            }
                            if ($s3 !== $this->peg_FAILED) {
                                $s2 = [$s2, $s3];
                                $s1 = $s2;
                            } else {
                                $this->peg_currPos = $s1;
                                $s1 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s1;
                            $s1 = $this->peg_FAILED;
                        }
                        if ($s1 !== $this->peg_FAILED) {
                            $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
                        } else {
                            $s0 = $s1;
                        }
                    }
                }
            }
        }

        return $s0;
    }

    private function peg_parse_NameChar(): mixed
    {
        $s0 = $this->peg_parse_DIGIT();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parse_NameFirst();
        }

        return $s0;
    }

    private function peg_parse_DIGIT(): mixed
    {
        if (peg_regex_test($this->peg_c16, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e59);
            }
        }

        return $s0;
    }

    private function peg_parse_ALPHA(): mixed
    {
        if (peg_regex_test($this->peg_c17, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e60);
            }
        }

        return $s0;
    }

    private function peg_parse_DescendantSegment(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 2) === $this->peg_l43) {
            $s1 = $this->peg_l43;
            $this->peg_currPos += 2;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e61);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_BracketedSelection();
            if ($s2 === $this->peg_FAILED) {
                $s2 = $this->peg_parse_WildcardSelector();
                if ($s2 === $this->peg_FAILED) {
                    $s2 = $this->peg_parse_MemberNameShorthand();
                }
            }
            if ($s2 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s0 = $this->peg_f46($s2);
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }
};
